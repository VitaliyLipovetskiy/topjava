<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <!--отключаем security для статических ресурсов..-->
    <http pattern="/resources/**" security="none"/>
    <!-- и библиотек webjars -->
    <http pattern="/webjars/**" security="none"/>

    <!--Для всех запросов, которые будут соответствовать паттерну "/rest/**" (запросы к REST контроллерам)-->
    <!--включаем авторизацию, включаем возможность использования expressionLanguage для проверки доступа -->
    <!--и отключаем создание сессии (сессия будет использоваться для UI контроллеров, будем смотреть на нее позже) -->
    <http pattern="/rest/**" use-expressions="true" name="restSecurityFilterChain" create-session="stateless">
        <!--Будет использоваться базовая авторизация, логин и пароль будут передаваться в заголовке запроса, закодированные в Base64 (открыто) -->
        <http-basic/>
        <!--Чтобы обратиться к endpoint с паттерном "/rest/admin/**", пользователь должен иметь роль ADMIN-->
        <intercept-url pattern="/rest/admin/**" access="hasRole('ADMIN')"/>
        <intercept-url pattern="/rest/profile" method="POST" access="isAnonymous()"/>
        <!--Ко всем остальным endpoint будут иметь доступ только аутентифицированные пользователи-->
        <intercept-url pattern="/**" access="isAuthenticated()"/>
        <!--Выключаем защиту от межсайтовой подделки запросов, будем смотреть на нее и включим позже-->
        <csrf disabled="true"/>
    </http>

    <!-- Конфигурируем хранение пароля в открытом виде (сделаем шифрацию позднее) -->
    <beans:bean name="noopEncoder" class="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>

    <http>
        <intercept-url pattern="/login" access="permitAll()"/>
        <intercept-url pattern="/profile/register" access="isAnonymous()"/>

        <intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>
        <intercept-url pattern="/**" access="isAuthenticated()"/>

        <form-login login-page="/login" default-target-url="/meals"
                    authentication-failure-url="/login?error=true"
                    login-processing-url="/spring_security_check"/>
        <logout logout-success-url="/login"/>
        <csrf disabled="true"/>
    </http>

    <!--Настройка аутентификации пользователей -->
    <authentication-manager>
        <authentication-provider user-service-ref="userService">
            <!-- Кодировщик паролей -->
            <password-encoder ref="noopEncoder"/>
            <!--
            <jdbc-user-service data-source-ref="dataSource"
                              users-by-username-query="SELECT email, password, enabled FROM users WHERE email = ?"
                               authorities-by-username-query="
                                                      SELECT u.email, r.role FROM users u, user_roles r WHERE u.id = r.user_id AND u.email = ?"
            />
             <user-service>
                 <user name="user@yandex.ru" password="password" authorities="ROLE_USER"/>
                 <user name="admin@gmail.com" password="admin" authorities="ROLE_ADMIN"/>
             </user-service>
             -->
            <!-- Явно задаем данные пользователей в конфигурации (изменим на следующем уроке на реальные, из базы) -->
            <!--            <user-service>-->
            <!--                <user name="user@yandex.ru" password="password" authorities="ROLE_USER"/>-->
            <!--                <user name="admin@gmail.com" password="admin" authorities="ROLE_ADMIN"/>-->
            <!--            </user-service>-->
        </authentication-provider>
    </authentication-manager>
</beans:beans>